package com.hzkc.parent.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hzkc.parent.greendao.entity.ChildContrlFlag;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHILD_CONTRL_FLAG".
*/
public class ChildContrlFlagDao extends AbstractDao<ChildContrlFlag, Long> {

    public static final String TABLENAME = "CHILD_CONTRL_FLAG";

    /**
     * Properties of entity ChildContrlFlag.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Childuuid = new Property(1, String.class, "childuuid", false, "CHILDUUID");
        public final static Property Parentuuid = new Property(2, String.class, "parentuuid", false, "PARENTUUID");
        public final static Property Status = new Property(3, String.class, "status", false, "STATUS");
        public final static Property Lasttime = new Property(4, String.class, "lasttime", false, "LASTTIME");
        public final static Property Yjgkflag = new Property(5, String.class, "yjgkflag", false, "YJGKFLAG");
        public final static Property Yjspfalg = new Property(6, String.class, "yjspfalg", false, "YJSPFALG");
        public final static Property Slbhflag = new Property(7, String.class, "slbhflag", false, "SLBHFLAG");
        public final static Property SlbhSpacetime = new Property(8, String.class, "slbhSpacetime", false, "SLBH_SPACETIME");
        public final static Property SlbhResttime = new Property(9, String.class, "slbhResttime", false, "SLBH_RESTTIME");
        public final static Property Yygkflag = new Property(10, String.class, "yygkflag", false, "YYGKFLAG");
        public final static Property Sjsjflag = new Property(11, String.class, "sjsjflag", false, "SJSJFLAG");
    };


    public ChildContrlFlagDao(DaoConfig config) {
        super(config);
    }
    
    public ChildContrlFlagDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHILD_CONTRL_FLAG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"CHILDUUID\" TEXT UNIQUE ," + // 1: childuuid
                "\"PARENTUUID\" TEXT," + // 2: parentuuid
                "\"STATUS\" TEXT," + // 3: status
                "\"LASTTIME\" TEXT," + // 4: lasttime
                "\"YJGKFLAG\" TEXT," + // 5: yjgkflag
                "\"YJSPFALG\" TEXT," + // 6: yjspfalg
                "\"SLBHFLAG\" TEXT," + // 7: slbhflag
                "\"SLBH_SPACETIME\" TEXT," + // 8: slbhSpacetime
                "\"SLBH_RESTTIME\" TEXT," + // 9: slbhResttime
                "\"YYGKFLAG\" TEXT," + // 10: yygkflag
                "\"SJSJFLAG\" TEXT);"); // 11: sjsjflag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHILD_CONTRL_FLAG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChildContrlFlag entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String childuuid = entity.getChilduuid();
        if (childuuid != null) {
            stmt.bindString(2, childuuid);
        }
 
        String parentuuid = entity.getParentuuid();
        if (parentuuid != null) {
            stmt.bindString(3, parentuuid);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(4, status);
        }
 
        String lasttime = entity.getLasttime();
        if (lasttime != null) {
            stmt.bindString(5, lasttime);
        }
 
        String yjgkflag = entity.getYjgkflag();
        if (yjgkflag != null) {
            stmt.bindString(6, yjgkflag);
        }
 
        String yjspfalg = entity.getYjspfalg();
        if (yjspfalg != null) {
            stmt.bindString(7, yjspfalg);
        }
 
        String slbhflag = entity.getSlbhflag();
        if (slbhflag != null) {
            stmt.bindString(8, slbhflag);
        }
 
        String slbhSpacetime = entity.getSlbhSpacetime();
        if (slbhSpacetime != null) {
            stmt.bindString(9, slbhSpacetime);
        }
 
        String slbhResttime = entity.getSlbhResttime();
        if (slbhResttime != null) {
            stmt.bindString(10, slbhResttime);
        }
 
        String yygkflag = entity.getYygkflag();
        if (yygkflag != null) {
            stmt.bindString(11, yygkflag);
        }
 
        String sjsjflag = entity.getSjsjflag();
        if (sjsjflag != null) {
            stmt.bindString(12, sjsjflag);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChildContrlFlag entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String childuuid = entity.getChilduuid();
        if (childuuid != null) {
            stmt.bindString(2, childuuid);
        }
 
        String parentuuid = entity.getParentuuid();
        if (parentuuid != null) {
            stmt.bindString(3, parentuuid);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(4, status);
        }
 
        String lasttime = entity.getLasttime();
        if (lasttime != null) {
            stmt.bindString(5, lasttime);
        }
 
        String yjgkflag = entity.getYjgkflag();
        if (yjgkflag != null) {
            stmt.bindString(6, yjgkflag);
        }
 
        String yjspfalg = entity.getYjspfalg();
        if (yjspfalg != null) {
            stmt.bindString(7, yjspfalg);
        }
 
        String slbhflag = entity.getSlbhflag();
        if (slbhflag != null) {
            stmt.bindString(8, slbhflag);
        }
 
        String slbhSpacetime = entity.getSlbhSpacetime();
        if (slbhSpacetime != null) {
            stmt.bindString(9, slbhSpacetime);
        }
 
        String slbhResttime = entity.getSlbhResttime();
        if (slbhResttime != null) {
            stmt.bindString(10, slbhResttime);
        }
 
        String yygkflag = entity.getYygkflag();
        if (yygkflag != null) {
            stmt.bindString(11, yygkflag);
        }
 
        String sjsjflag = entity.getSjsjflag();
        if (sjsjflag != null) {
            stmt.bindString(12, sjsjflag);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChildContrlFlag readEntity(Cursor cursor, int offset) {
        ChildContrlFlag entity = new ChildContrlFlag( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // childuuid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // parentuuid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // status
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // lasttime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // yjgkflag
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // yjspfalg
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // slbhflag
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // slbhSpacetime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // slbhResttime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // yygkflag
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // sjsjflag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChildContrlFlag entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChilduuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParentuuid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStatus(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLasttime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setYjgkflag(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setYjspfalg(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSlbhflag(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSlbhSpacetime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSlbhResttime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setYygkflag(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSjsjflag(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChildContrlFlag entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChildContrlFlag entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
